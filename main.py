import os
import matplotlib.pyplot as plt
import numpy as np
import tensorflow as tf

# Function to ensure the directory for saving images exists
def ensure_directory(directory):
    if not os.path.exists(directory):
        os.makedirs(directory)

# Function to gather and plot the initial data
def gather_data():
    m = 2
    b = 0.5
    x = np.linspace(0, 4, 100)
    y = (m * x) + b + np.random.randn(*x.shape) * 0.25
    plot_data(x, y)
    return x, y

# Function to plot the initial data
def plot_data(x, y):
    plt.figure()
    plt.scatter(x, y, alpha=0.5)
    ensure_directory('images')
    plt.savefig('images/plot.png', dpi=300)

# Simple linear regression model
class Model:
    def __init__(self):
        self.weight = tf.Variable(10.0)
        self.bias = tf.Variable(10.0)

    def __call__(self, x):
        return (self.weight * x) + self.bias

# Function to calculate the loss
def calculate_loss(y_actual, y_expected):
    return tf.reduce_mean(tf.square(y_actual - y_expected))

# Function to perform a training step
def train(model, x, y_expected, learning_rate):
    with tf.GradientTape() as gt:
        y_output = model(x)
        loss = calculate_loss(y_output, y_expected)
        gradients = gt.gradient(loss, [model.weight, model.bias])
    model.weight.assign_sub(gradients[0] * learning_rate)
    model.bias.assign_sub(gradients[1] * learning_rate)

# Function to train the model over a number of epochs and plot the loss
def train_model(model, x, y, epochs, learning_rate):
    losses = []
    for epoch in range(epochs):
        y_output = model(x)
        loss = calculate_loss(y_output, y)
        # Log the epoch and loss
        print(f"Epoch {epoch}: loss = {loss.numpy()}")
        losses.append(loss)
        train(model, x, y, learning_rate)
    plot_loss(range(epochs), losses)

# Function to plot the loss over epochs
def plot_loss(epochs, losses):
    plt.figure()
    plt.plot(epochs, losses)
    plt.yscale('log')  # Logarithmic scale for the y-axis
    ensure_directory('images')
    plt.savefig('images/epochs_loss.png', dpi=300)

# Function to evaluate the model and plot the results
def evaluate_model(model, x, y):
    y_predicted = model(x)
    plot_evaluation(x, y, y_predicted)

# Function to plot the evaluation results
def plot_evaluation(x, y, y_predicted):
    plt.figure()
    plt.scatter(x, y, label='Actual', alpha=0.5)
    plt.scatter(x, y_predicted, label='Predicted', alpha=0.5)
    plt.legend()
    ensure_directory('images')
    plt.savefig('images/eval_results.png', dpi=300)

# Main function to execute the model training and evaluation
def main():
    x, y = gather_data()
    model = Model()
    epochs = 100
    learning_rate = 0.15
    train_model(model, x, y, epochs, learning_rate)
    evaluate_model(model, x, y)

if __name__ == "__main__":
    main()
